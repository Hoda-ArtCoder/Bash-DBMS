#! /bin/bash
source ./Validations
source ./Common


function delete_from_table() {
    echo -e "${magenta}-- -- -- --Table Deletion in $SELECTED_DB -- -- -- --${clear}"

    # Get the list of tables in the database
    tables=($(ls "$DB_DIR/$SELECTED_DB" | grep -v ".metadata"))
    if [[ ${#tables[@]} -eq 0 ]]; then
        echo -e "${blue}No tables found in ${SELECTED_DB} ...${clear}"
        sleep 0.5
        echo -e "${blue}Aborting deletion......${clear}"
        sleep 0.5
        tablesMenu
    fi

    # Display the table selection menu
    echo -e "${cyan}>> Select a table from the following list: ${clear}"
    select table_name in "${tables[@]}"; do
        if [[ -n "$table_name" ]]; then
            echo -e "${blue}You selected table: ${magenta}$table_name${clear}"
            sleep 0.5
            # Check if the table and its metadata exist
            SELECTED_TABLE=$table_name
            if is_valid_table; then
                echo -e "${blue}Table${magenta} $table_name ${blue}exists and valid.${clear}"
                sleep 0.5
            fi
            delete_from_table_menu "$table_name"
            break
        else
            echo -e "${yellow}Invalid choice. Please select a valid number.${clear}"
        fi
    done

    tablesMenu
}

# Function to display delete options
function delete_from_table_menu() {
    echo -e "${cyan}Choose a delete option for table ${magenta}'$1'?${clear}"
    select option in "Delete row by column value" "Delete all rows" "Go back"; do
        case $option in
            "Delete row by column value")
                delete_row_by_id "$1"
                ;;
            "Delete all rows")
                delete_all_rows "$1"
                ;;
            "Go back")
                return
                ;;
            *)
                echo -e "${yellow}Warning: Invalid option. Please try again.${clear}"
                ;;
        esac
    done
}

# Function to delete a row based on ID or specific column value
function delete_row_by_id() {
    table_file="$DB_DIR/$SELECTED_DB/$1" 
    metadata_file="${table_file}.metadata"
   
    # -s checks if the file is not empty
    if [[ ! -s "$table_file" ]]; then
        echo -e "${blue}Table ${magenta}$1 ${blue}has no data."
        sleep 0.5
        echo -e "${blue}Aborting deletion.${clear}"
        sleep 0.5
        tablesMenu
    fi

    # Identify the primary key from the metadata
    pk_column=$(awk -F':' '$3 == "PK" {print $1}' "$metadata_file")
    pk_index=$(awk -F':' '$3 == "PK" {print NR}' "$metadata_file")
    if [[ -z "$pk_column" || -z "$pk_index" ]]; then
        echo -e "${yellow}Warning: Primary key not found in metadata.${clear}"
        tablesMenu
    fi

    echo -e "${cyan}Your Primary Key is: ${red}$pk_column ${clear}"

    # Display the table
    select_all $1
    sleep 0.5
    # Prompt for the value of the primary key
    echo -e "${cyan}Enter the value of the primary key to delete:${clear}"
    read id_value

    # Use `awk` to filter out the row with the specified primary key
    
    # Use awk to filter out the row with the specified ID and write the result to a temporary file
    awk -F':' -v id="$id_value" -v pk_idx="$pk_index" '{
             if ($pk_idx != id) 
                print $0 
             }' "$table_file" > tmp

    # Move the updated table data back to the original table file
    mv tmp "$table_file"


    echo -e "${green}Row with PK $id_value deleted successfully.${clear}"
    sleep 0.5
    tablesMenu
}

function delete_all_rows() {
    table_file="$DB_DIR/$SELECTED_DB/$1"    
    # -s checks if the file is not empty
    if [[ ! -s "$table_file" ]]; then
        echo -e "${blue}Table ${magenta}$1 ${blue}has no data."
        sleep 0.5
        echo -e "${blue}Aborting deletion.${clear}"
        sleep 0.5
        tablesMenu
    fi
    echo -n > "$table_file"
    echo -e "${green}ALL ROWS DELETED SUCCESSFULLY.${clear}"
    sleep 0.5
    tablesMenu
}
