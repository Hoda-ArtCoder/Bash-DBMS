#! /bin/bash
source ./Common

function drop_table(){
  echo -e "${magenta}-- -- -- --Table Drop in $SELECTED_DB-- -- -- --${clear}"
  # Ensure user is connected to db
  if [ -z "$SELECTED_DB" ]; then
    echo -e "${yellow}Warrning: No database selected. Please connect to a database first.${clear}"
    return
  fi

  # List tables in the selected database (excluding metadata files)
  tables_arr=($(ls "$DB_DIR/$SELECTED_DB" | grep -v ".metadata"))

  # Check if there are any tables
  if [ ${#tables_arr[@]} -eq 0 ]; then
      echo -e "${blue}No tables found in ${SELECTED_DB} ...${clear}"
      sleep 0.5
      echo -e "${blue}Aborting table drop......${clear}"
      sleep 0.5
      tablesMenu
  else
  
  PS3=$(echo -e "${cyan}>> Select a table from the above list: ${clear}")
  select table_name in "${tables_arr[@]}"; do
      if [[ -n "$table_name" ]]; then
          echo -e "${blue}Are you sure you want to drop ${magenta}$table_name${blue}?"
          echo -e "${yellow}Warrning: This action cannot be undone. (yes/no) ${clear}"
          read user_choice
          if [[ "yes"  =~ "$user_choice" ]]; then
              rm -r "$DB_DIR/$SELECTED_DB/$table_name"
              rm -r "$DB_DIR/$SELECTED_DB/$table_name.metadata"
              # Update the tables_arr
              tables_arr=($(ls -l "$DB_DIR/$SELECTED_DB" | grep -v ".metadata" | awk '{print $NF}'))
              echo -e "${green}TABLE${magenta} $table_name ${green}DROPPED SUCCESSFULLY.${clear}"
              sleep 0.5
              tablesMenu
          else
              echo -e "${blue}Aborting table drop.${clear}"
              sleep 0.5
              tablesMenu
          fi
      else
          echo -e "${yellow}Warning: Invalid choice. Please select a valid number.${clear}"
      fi
  done
  
  tablesMenu
  fi
}