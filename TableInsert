#!/bin/bash
source ./Validations
source ./Common

# Set initial flag value to 1
flag=1

# Function to insert data into a table
function choose_table() {
    echo -e "${cyan}>> Enter table name from following list: ${clear}"
    ls "$DB_DIR/$SELECTED_DB" | grep -v ".metadata"

    read table_name

    # Check if the table and its metadata exist
    if [ -e "$DB_DIR/$SELECTED_DB/$table_name" ] && [ -e "$DB_DIR/$SELECTED_DB/$table_name.metadata" ]; then
        echo -e "${blue}Table [ $table_name ] exists$"
        echo -e "Continuing...............${clear}"
        flag=1
        sleep 0.5
        #calling function
        insert_table_data $table_name
    else
        echo -e "${yellow}Warning: Table '$table_name' does not exist or corrupted.${clear}"
        flag=0
        navigate_menu  
    fi
}

function insert_table_data() {
    # Read column names and data types from metadata file
    column_names=($(cut -d ':' -f 1 "$DB_DIR/$SELECTED_DB/$table_name.metadata"))
    data_types=($(cut -d ':' -f 2 "$DB_DIR/$SELECTED_DB/$table_name.metadata"))

    echo -e "${gray}Column names: ${column_names[@]} ${clear}"
    echo -e "${gray}Data types: ${data_types[@]} ${clear}"

    echo -e "${cyan}Insert data in the order of columns (space-separated): ${clear}"
    read -a values  # Array to store user input values

    # Check if the number of input values matches the number of columns
    if [ ${#values[@]} -ne ${#column_names[@]} ]; then
        echo -e "${yellow}Warning: The number of values does not match the number of columns."
        echo -e "${gray}Try again.${clear}"
        flag=0
        insert_table_data
    else
        flag=1
    fi


    if [ $flag -eq 1 ]; then
        # Validate the data types of the input values
        for i in "${!values[@]}"; do
            if [ "${data_types[$i]}" == "int" ]; then
                if ! is_int "${values[$i]}"; then
                    echo -e "${yellow}Warning: Value '${values[$i]}' is not an integer.${clear}"
                    flag=0
                    insert_table_data
                fi
            elif [ "${data_types[$i]}" == "string" ]; then
                if ! is_string "${values[$i]}"; then
                    echo -e "${yellow}Warning: Value '${values[$i]}' is not a string.${clear}"
                    flag=0
                    insert_table_data
                fi
            fi
        done

        if [ $flag -eq 1 ]; then
            echo "${values[@]}" >> "$DB_DIR/$SELECTED_DB/$table_name"
            #checking the exit status of the previous command. If the exit status is equal to 0, it means the previous command was successful.
            if [ $? -eq 0 ]; then
                echo -e "${green}DATA INSERTED INTO TABLE '$table_name' SUCCESSFULLY.${clear}"
                navigate_menu
            else
                echo -e "${yellow}Warning: Failed to insert data into the table.${clear}"
                insert_table_data
            fi
        fi
    fi
}

insert_table_data