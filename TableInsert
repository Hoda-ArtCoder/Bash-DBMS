#!/bin/bash
source ./Validations
source ./Common

# Set initial flag value to 1
flag=1

# Function to insert data into a table
function insert_into_table() {
    # List tables in the selected database (excluding metadata files)
    tables=($(ls "$DB_DIR/$SELECTED_DB" | grep -v ".metadata"))

    # Check if there are any tables
    if [ ${#tables[@]} -eq 0 ]; then
        echo -e "${blue}No tables found in ${SELECTED_DB} ...${clear}"
        sleep 0.5
        echo -e "${blue}Aborting insertion......${clear}"
        sleep 0.5
        tablesMenu
    else
        echo -e "${cyan}Select a table from the following list:${clear}"
        select table_name in "${tables[@]}"; do
            if [ -n "$table_name" ]; then
                echo -e "${blue}You selected table: ${magenta}$table_name ${clear}"
                SELECTED_TABLE="$table_name"
                sleep 0.5
                break
            else
                echo -e "${yellow} Warrning: Invalid choice. ${clear}"
                flag=0
            fi
        done
    fi

    # Check if the table and its metadata exist
    if is_valid_table; then
        echo -e "${blue}Table ${magenta}[ $table_name ] ${blue}exists and valid.${clear}"
        sleep 0.5
        insert_table_data
    else
        echo -e "${yellow}Warning: Table '$table_name' does not exist.${clear}"
        flag=0
        tablesMenu
    fi
}

function insert_table_data() {
    # Read column names and data types from metadata file
    column_names=($(cut -d ':' -f 1 "$DB_DIR/$SELECTED_DB/$table_name.metadata"))
    data_types=($(cut -d ':' -f 2 "$DB_DIR/$SELECTED_DB/$table_name.metadata"))

    # Check if table has no columns 
    if [ ${#column_names[@]} -eq 0 ]; then
        echo -e "${blue}Table ${magenta}[ $table_name ]${blue} has no columns.${clear}"
        sleep 0.5
        echo -e "${blue}Aborting insertion.${clear}"
        flag=0
        tablesMenu
    fi
    columns_with_types=""
    #displaying columns with types
    for i in "${!column_names[@]}"; do
        columns_with_types+="${magenta}${column_names[i]} ${blue}(${data_types[i]})${clear} "
    done

    echo -e "${cyan}>>Insert data in the order of columns (space-separated):"
    echo -e "${cyan}${columns_with_types}${clear}"
    read -a values  # Array to store user input values
    #####################################################################

    # Check if the number of input values matches the number of columns
    if [ ${#values[@]} -ne ${#column_names[@]} ]; then
        echo -e "${yellow}Warning: The number of values does not match the number of columns.${clear}"
        flag=0
        insert_table_data
    else
        flag=1
    fi

    if [ $flag -eq 1 ]; then
        # Validate the data types of the input values
        for i in "${!values[@]}"; do
            if [ $i -eq 0 ]; then
                # Check uniqueness of the first value (Primary Key)
                if grep -q "^${values[$i]}:" "$DB_DIR/$SELECTED_DB/$table_name"; then
                    echo -e "${yellow}Warning: Value '${values[$i]}' already exists as a primary key.${clear}"
                    flag=0
                    insert_table_data #try again
                fi
                if { [ "${data_types[$i]}" == "int" ] && ! is_int "${values[$i]}"; } || { [ "${data_types[$i]}" == "string" ] && ! is_string "${values[$i]}"; }; then
                    echo -e "${yellow}Warning: Invalid data type for column '${column_names[$i]}'.${clear}"
                    flag=0
                    insert_table_data
                fi
            fi

            if { [ "${data_types[$i]}" == "int" ] && ! is_int "${values[$i]}"; } || { [ "${data_types[$i]}" == "string" ] && ! is_string "${values[$i]}"; }; then
                echo -e "${yellow}Warning: Invalid data type for column '${column_names[$i]}'.${clear}"
                flag=0
                insert_table_data
            fi

        done

        if [ $flag -eq 1 ]; then
            #s/ /:/g: Substitutes all spaces with (:)
            echo "${values[@]}" | sed 's/ /:/g' >> "$DB_DIR/$SELECTED_DB/$table_name"
            #checking the exit status of the previous command. If the exit status is equal to 0, it means the previous command was successful.
            if [ $? -eq 0 ]; then
                echo -e "${green}DATA INSERTED INTO TABLE '$table_name' SUCCESSFULLY.${clear}"
                echo -e "${gray}Do you want to insert another row (y/n)? ${clear}"
                read choice
                if [ "$choice" == "y" ]; then
                    insert_table_data
                else
                    tablesMenu
                fi
            else
                echo -e "${yellow}Warning: Failed to insert data into the table.${clear}"
                insert_table_data
            fi
        fi
    fi
}
